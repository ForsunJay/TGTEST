"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env:

1. ADMIN_IDS - —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
   –ü—Ä–∏–º–µ—Ä: ADMIN_IDS=123456789,987654321

2. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:
   PERMISSION_CREATE - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
   PERMISSION_APPROVE - –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
   PERMISSION_REJECT - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
   PERMISSION_EDIT - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
   PERMISSION_VIEW_ALL - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫

   –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∞:
   - "all" - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   - "admins" - –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   - "none" - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∏–∫–æ–º—É

–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ .env:
ADMIN_IDS=123456789,987654321
PERMISSION_CREATE=all
PERMISSION_APPROVE=admins
PERMISSION_REJECT=admins
PERMISSION_EDIT=admins
PERMISSION_VIEW_ALL=admins

–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
2. –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
3. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
"""

import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from telegram.error import BadRequest
from database import (
    init_db, get_or_create_user, create_request, update_request_status,
    add_comment, RequestStatus, get_requests, get_request, get_requests_paginated, get_request_comments,
    update_request, User
)
from validators import (
    validate_amount, validate_partner_account, validate_note,
    validate_period, validate_date, validate_comment,
    validate_rejection_reason, validate_edit_value
)
import json
import tempfile
import shutil
from typing import List, Dict
from sqlalchemy import select, func
import pandas as pd

# --- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ HTTP –ª–æ–≥–æ–≤ ---
for noisy_logger in ['httpx', 'urllib3', 'telegram.vendor.ptb_urllib3.urllib3.connectionpool']:
    logging.getLogger(noisy_logger).setLevel(logging.WARNING)


# Load environment variables
load_dotenv('bot.env')
timeDelta=3 #Delta for UTC+3

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s\n'
           'Function: %(funcName)s\n'
           'Line: %(lineno)d\n'
           'Message: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# States for conversation handler
(
    CHOOSING_PROJECT,
    ENTERING_AMOUNT,
    CHOOSING_CURRENCY,
    CHOOSING_SOURCE,
    ATTACHING_DOCUMENT,
    ENTERING_NOTE,
    CHOOSING_PERIOD,
    CHOOSING_DATE,
    CONFIRMING_REQUEST,
    ENTERING_PARTNER_ACCOUNT,
    ADMIN_MENU,
    VIEWING_REQUESTS,
    VIEWING_REQUEST_DETAILS,
    EDITING_REQUEST,
    ADDING_COMMENT,
    ADDING_REJECTION_REASON,
    EDITING_SOURCE,
    EXPORTING_DATA,
    EXPORT_MENU,
    EXPORT_FORMAT
) = range(20)

class BotConfig:
    """Configuration class for the bot."""
    # Define SOURCES before __init__
    SOURCES = {
        'rs_rf': 'üè¶ –†–° –†–§ –°–µ—Ä–≤–∏—Å+ –¢–æ—á–∫–∞–±–∞–Ω–∫',
        'rs_too_kz': 'üè¶ –†–° –¢–û–û –ö–ó',
        'rs_ip_kz': 'üè¶ –†–° –ò–ü –ö–ó',
        'card_too_kz': 'üí≥ –ö–∞—Ä—Ç–∞ –¢–û–û –ö–ó',
        'card_ip_kz': 'üí≥ –ö–∞—Ä—Ç–∞ –ò–ü –ö–ó',
        'rs_ooo_am': 'üè¶ –†–° –û–û–û –ê–ú',
        'rs_ooo_am_eur': 'üè¶ –†–° –û–û–û –ê–ú EUR',
        'card_ooo_am': 'üí≥ –ö–∞—Ä—Ç–∞ –û–û–û –ê–ú',
        'crypto': 'üí∞ –ö—Ä–∏–ø—Ç–∞',
        'cash': 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ'
    }

    def __init__(self):
        self.TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
        if not self.TELEGRAM_TOKEN:
            raise ValueError("No TELEGRAM_TOKEN found in environment variables!")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–æ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.PROJECTS = {
            'mf_rf': 'üá∑üá∫ –ú–§ –†–§',
            'mf_kz': 'üá∞üáø –ú–§ –ö–ó',
            'mf_am': 'üá¶üá≤ –ú–§ –ê–ú',
            'mf_world': 'üåê –ú–§ –í–û–†–õ–î'
        }

        self.CURRENCIES = {
            'RUB': '–†—É–±–ª—å',
            'KZT': '–¢–µ–Ω–≥–µ',
            'AMD': '–î—Ä–∞–º',
            'USD': 'USD',
            'EUR': 'EUR',
            'USDT': 'USDT'
        }

        # –°–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç
        self.CURRENCY_SYMBOLS = {
            'RUB': '‚ÇΩ',
            'KZT': '‚Ç∏',
            'AMD': '÷è',
            'USD': '$',
            'EUR': '‚Ç¨',
            'USDT': '‚ÇÆ',
            'BTC': '‚Çø',
            'DEFAULT': 'üí±'
        }
        
        # –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.ADMIN_IDS = [int(admin_id) for admin_id in os.getenv('ADMIN_IDS', '').split(',') if admin_id]
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ñ–∏–Ω–∫–æ–Ω—Ç—Ä–æ–ª—è
        self.FINCONTROL_IDS = [int(fc_id) for fc_id in os.getenv('FINCONTROL_IDS', '').split(',') if fc_id]
        
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        self.ALL_ACCESS_ADMIN_IDS = [int(admin_id) for admin_id in os.getenv('ALL_ACCESS_ADMIN_IDS', '').split(',') if admin_id]
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        self.ADMIN_SOURCE_MAPPING = {}
        for source in self.SOURCES.keys():
            env_var = f'ADMIN_SOURCE_{source.upper()}'
            admin_ids = os.getenv(env_var, '')
            if admin_ids:
                self.ADMIN_SOURCE_MAPPING[source] = [int(admin_id) for admin_id in admin_ids.split(',') if admin_id]
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º
        self.ADMIN_CRYPTO_MAPPING = {}
        for project in ['mf_rf', 'mf_kz', 'mf_am', 'mf_world']:
            env_var = f'ADMIN_CRYPTO_{project.upper()}'
            admin_ids = os.getenv(env_var, '')
            if admin_ids:
                self.ADMIN_CRYPTO_MAPPING[project] = [int(admin_id) for admin_id in admin_ids.split(',') if admin_id]
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "all" - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, "admins" - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, "none" - –Ω–∏–∫—Ç–æ
        self.PERMISSION_CREATE = os.getenv('PERMISSION_CREATE', 'all')
        self.PERMISSION_APPROVE = os.getenv('PERMISSION_APPROVE', 'admins') 
        self.PERMISSION_REJECT = os.getenv('PERMISSION_REJECT', 'admins')
        self.PERMISSION_EDIT = os.getenv('PERMISSION_EDIT', 'admins')
        self.PERMISSION_VIEW_ALL = os.getenv('PERMISSION_VIEW_ALL', 'admins')
            
        # –°—Ç–∞—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.ALLOW_ADMIN_CREATE = os.getenv('ALLOW_ADMIN_CREATE', 'false').lower() == 'true'

        self.NOTES = [
            '–†–µ–∫–ª–∞–º–∞',
            '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –†–ö',
            '–ö–æ–º-—Ü–∏–∏. –°–ú–°',
            '–ö–æ–º-—Ü–∏–∏. –ê–í–¢–û–î–û–ó–í–û–ù–´',
            '–ö–æ–º-—Ü–∏–∏. –†–ê–°–°–´–õ–ö–ò',
            '–ö–æ–º-—Ü–∏–∏. –¢–ï–õ–ï–§–û–ù–ò–Ø',
            '–ö–æ–º-—Ü–∏–∏. –û–ù–õ–ê–ô–ù'
        ]

    def can_access_source(self, user_id: int, source: str, project: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É."""
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        if user_id in self.ALL_ACCESS_ADMIN_IDS:
            return True
            
        # –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        if source == 'crypto' and project:
            return user_id in self.ADMIN_CRYPTO_MAPPING.get(project, [])
            
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        return user_id in self.ADMIN_SOURCE_MAPPING.get(source, [])

class BotHandlers:
    """Class containing all bot handlers."""
    STATUS_DISPLAY = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'waiting': '–û–¥–æ–±—Ä–µ–Ω–æ/–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'paid': '–û–ø–ª–∞—á–µ–Ω–∞',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    }
    def __init__(self, config: BotConfig, db_session):
        self.config = config
        self.db_session = db_session
        self.status_emoji = {
            RequestStatus.PENDING: "‚è≥",
            RequestStatus.WAITING: "üí∞",
            RequestStatus.PAID: "‚úÖ",
            RequestStatus.REJECTED: "‚ùå"
        }
        # Cache for user info to reduce database queries
        self._user_cache = {}
        # Cache for request details
        self._request_cache = {}
        # Cache timeout in seconds
        self._cache_timeout = 300  # 5 minutes

    def _get_cached_user(self, user_id):
        """Get user from cache or database with caching."""
        cache_key = f"user_{user_id}"
        if cache_key in self._user_cache:
            cache_time, user = self._user_cache[cache_key]
            if (datetime.now() - cache_time).total_seconds() < self._cache_timeout:
                return user
        
        user = self.db_session.query(User).filter_by(telegram_id=user_id).first()
        if user:
            self._user_cache[cache_key] = (datetime.now(), user)
        return user

    def _get_cached_request(self, request_id):
        """Get request from cache or database with caching."""
        cache_key = f"request_{request_id}"
        if cache_key in self._request_cache:
            cache_time, request = self._request_cache[cache_key]
            if (datetime.now() - cache_time).total_seconds() < self._cache_timeout:
                return request
        
        request = get_request(self.db_session, request_id)
        if request:
            self._request_cache[cache_key] = (datetime.now(), request)
        return request

    def _get_main_menu_keyboard(self, user_id: int) -> list:
        """Generate main menu keyboard based on user role."""
        keyboard = []
        
        # Check if user has full access
        if user_id in self.config.ALL_ACCESS_ADMIN_IDS:
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_requests")],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
                [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
            ]
        # Check if user is admin
        elif user_id in self.config.ADMIN_IDS:
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_requests")],
                [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
            ]
        # Check if user is in fincontrol group
        elif user_id in self.config.FINCONTROL_IDS:
            keyboard = [
                [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_requests")],
                [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
            ]
        # Regular user
        else:
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
            ]
        
        return keyboard

    def _get_main_menu_message(self, user_id: int) -> str:
        """Generate main menu message based on user role."""
        if user_id in self.config.ALL_ACCESS_ADMIN_IDS:
            return "üëã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        elif user_id in self.config.ADMIN_IDS:
            return "üëã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        elif user_id in self.config.FINCONTROL_IDS:
            return "üëã –ü–∞–Ω–µ–ª—å —Ñ–∏–Ω–∫–æ–Ω—Ç—Ä–æ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            return "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    async def _show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str = None) -> int:
        """Show main menu based on user role."""
        try:
            user_id = update.effective_user.id
            
            # Get keyboard and message based on user role
            keyboard = self._get_main_menu_keyboard(user_id)
            default_message = self._get_main_menu_message(user_id)
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message or default_message,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    message or default_message,
                    reply_markup=reply_markup
                )
            
            return ADMIN_MENU
            
        except Exception as e:
            logger.error(f"Error in _show_main_menu: {e}")
            if update.callback_query:
                await self._handle_error(update.callback_query, "showing main menu")
            return ADMIN_MENU

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Start the conversation and ask for project selection."""
        try:
            user = get_or_create_user(
                self.db_session,
                update.effective_user.id,
                update.effective_user.username
            )
            
            return await self._show_main_menu(update, context)

        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É @butterglobe"
            )
            return ConversationHandler.END

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
        try:
            query = update.callback_query
            await query.answer()

            logger.info(f"Admin callback received: {query.data}")

            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback data
            if query.data == "create_request":
                return await self.admin_create_request(query, context)
            elif query.data == "view_requests":
                return await self.admin_view_requests(query, context)
            elif query.data == "my_requests":
                return await self.view_my_requests(query, context)
            elif query.data == "admin_settings":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if update.effective_user.id not in self.config.ALL_ACCESS_ADMIN_IDS:
                    await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", show_alert=True)
                    return ADMIN_MENU
                return await self.admin_settings(query, context)
            elif query.data == "export_data":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if not (update.effective_user.id in self.config.ADMIN_IDS or 
                       update.effective_user.id in self.config.FINCONTROL_IDS or 
                       update.effective_user.id in self.config.ALL_ACCESS_ADMIN_IDS):
                    await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                    return ADMIN_MENU
                return await self.handle_export_data(update, context)
            elif query.data.startswith("export_requests") or query.data.startswith("export_users"):
                return await self.handle_export_format(update, context)
            elif query.data.endswith("_excel") or query.data.endswith("_csv"):
                return await self.process_export(update, context)
            elif query.data.startswith("setting_"):
                return await self.handle_settings_option(query, context)
            elif query.data == "back_to_menu":
                return await self._show_main_menu(Update(update_id=0, callback_query=query), context)
            elif query.data.startswith("filter_"):
                return await self._handle_filter(query, context)
            elif query.data in ["prev_page", "next_page"]:
                return await self._handle_page_navigation(query, context)
            elif query.data.startswith("request_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞—è–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
                request_id = int(query.data.split('_')[1])
                return await self.view_request_details_by_id(update, context, request_id)
            else:
                logger.warning(f"Unhandled admin callback: {query.data}")
                return ADMIN_MENU

        except Exception as e:
            logger.error(f"Error in handle_admin_callback: {e}")
            if 'query' in locals():
                await self._handle_error(query, "admin callback")
            return ADMIN_MENU

    async def admin_create_request(self, query, context) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        keyboard = [
            [InlineKeyboardButton(project, callback_data=project_id)]
            for project_id, project in self.config.PROJECTS.items()
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏:",
            reply_markup=reply_markup
        )
        logger.info(f"Admin creating new request, showing project selection")
        return CHOOSING_PROJECT

    async def admin_view_requests(self, query, context) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
        context.user_data['viewing_my_requests'] = False
        context.user_data['request_filter'] = None
        context.user_data['request_page'] = 0

        keyboard = [
            [InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="filter_pending")],
            [InlineKeyboardButton("üí∞ –û–¥–æ–±—Ä–µ–Ω–æ/–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", callback_data="filter_waiting")],
            [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="filter_paid")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="filter_rejected")],
            [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="filter_all")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        logger.info("Showing request filter keyboard")
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ id –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç–µ):",
            reply_markup=reply_markup
        )
        return VIEWING_REQUESTS

    async def admin_settings(self, query, context) -> int:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        user_id = query.from_user.id

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        keyboard = []

        # –°–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
        can_create = self.config.PERMISSION_CREATE == 'all' or (self.config.PERMISSION_CREATE == 'admins' and user_id in self.config.ADMIN_IDS)
        keyboard.append([InlineKeyboardButton(
            f"{'‚úÖ' if can_create else '‚ùå'} –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫", 
            callback_data="setting_toggle_create"
        )])

        # –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
        can_view_all = self.config.PERMISSION_VIEW_ALL == 'all' or (self.config.PERMISSION_VIEW_ALL == 'admins' and user_id in self.config.ADMIN_IDS)
        keyboard.append([InlineKeyboardButton(
            f"{'‚úÖ' if can_view_all else '‚ùå'} –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º", 
            callback_data="setting_toggle_view_all"
        )])

        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏
        can_approve = self.config.PERMISSION_APPROVE == 'all' or (self.config.PERMISSION_APPROVE == 'admins' and user_id in self.config.ADMIN_IDS)
        keyboard.append([InlineKeyboardButton(
            f"{'‚úÖ' if can_approve else '‚ùå'} –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫", 
            callback_data="setting_toggle_approve"
        )])

        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏
        can_reject = self.config.PERMISSION_REJECT == 'all' or (self.config.PERMISSION_REJECT == 'admins' and user_id in self.config.ADMIN_IDS)
        keyboard.append([InlineKeyboardButton(
            f"{'‚úÖ' if can_reject else '‚ùå'} –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫", 
            callback_data="setting_toggle_reject"
        )])

        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
        can_edit = self.config.PERMISSION_EDIT == 'all' or (self.config.PERMISSION_EDIT == 'admins' and user_id in self.config.ADMIN_IDS)
        keyboard.append([InlineKeyboardButton(
            f"{'‚úÖ' if can_edit else '‚ùå'} –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫", 
            callback_data="setting_toggle_edit"
        )])

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=reply_markup
        )

        logger.info(f"Admin settings displayed for user {user_id}")
        return ADMIN_MENU

    async def handle_settings_option(self, query, context) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        try:
            user_id = query.from_user.id
            setting_action = query.data.replace("setting_toggle_", "")

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await query.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env).\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.", 
                show_alert=True
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return await self.admin_settings(query, context)

        except Exception as e:
            logger.error(f"Error in handle_settings_option: {e}")
            if 'query' in locals():
                await self._handle_error(query, "settings update")
            return ADMIN_MENU

    async def back_to_admin_menu(self, query, context) -> int:
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        return await self._show_main_menu(Update(update_id=0, callback_query=query), context)

    async def project_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle project selection."""
        try:
            query = update.callback_query
            await query.answer()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            if query.data == "back_to_menu":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                if update.effective_user.id in self.config.ADMIN_IDS:
                    keyboard = [
                        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_requests")],
                        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")],
                        [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        "üëã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                else:
                    keyboard = [
                        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                        [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                return ADMIN_MENU

            project_id = query.data
            context.user_data['project'] = project_id

            # Create keyboard for currency selection with emojis
            keyboard = []
            for currency_id, currency in self.config.CURRENCIES.items():
                symbol = self.config.CURRENCY_SYMBOLS.get(currency_id, self.config.CURRENCY_SYMBOLS['DEFAULT'])
                button_text = f"{symbol} {currency}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=currency_id)])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {self.config.PROJECTS[project_id]}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
                reply_markup=reply_markup
            )
            return CHOOSING_CURRENCY

        except Exception as e:
            logger.error(f"Error in project_selected: {e}")
            if 'query' in locals():
                await self._handle_error(query, "project selection")
            return ConversationHandler.END

    async def currency_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle currency selection."""
        try:
            query = update.callback_query
            await query.answer()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            if query.data == "back_to_menu":
                if update.effective_user.id in self.config.ADMIN_IDS:
                    return await self.back_to_admin_menu(query, context)
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                    keyboard = [
                        [InlineKeyboardButton(project, callback_data=project_id)]
                        for project_id, project in self.config.PROJECTS.items()
                    ]
                    keyboard.append([InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")])
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                        reply_markup=reply_markup
                    )
                    return CHOOSING_PROJECT

            currency_id = query.data
            context.user_data['currency'] = currency_id      # Ask for amount
            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {self.config.CURRENCIES[currency_id]}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
            )
            return ENTERING_AMOUNT

        except Exception as e:
            logger.error(f"Error in currency_selected: {e}")
            if 'query' in locals():
                await self._handle_error(query, "currency selection")
            return ConversationHandler.END

    async def amount_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle amount input."""
        try:
            amount_text = update.message.text.strip()
            
            try:
                amount = validate_amount(amount_text)
                context.user_data['amount'] = amount

                # Create keyboard for source selection with emojis
                keyboard = []
                for source_id, source in self.config.SOURCES.items():
                    if 'crypto' in source_id.lower():
                        button_text = f"{source}"
                    elif 'bank' in source_id.lower():
                        button_text = f"{source}"
                    else:
                        button_text = f"{source}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=source_id)])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"–°—É–º–º–∞: {amount}{self.config.CURRENCIES[context.user_data['currency']]}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤:",
                    reply_markup=reply_markup
                )
                return CHOOSING_SOURCE

            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return ENTERING_AMOUNT

        except Exception as e:
            logger.error(f"Error in amount_entered: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ENTERING_AMOUNT

    async def source_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle source selection."""
        try:
            query = update.callback_query
            await query.answer()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            if query.data == "back_to_menu":
                if update.effective_user.id in self.config.ADMIN_IDS:
                    return await self.back_to_admin_menu(query, context)
                else:
                    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã
                    keyboard = [
                        [InlineKeyboardButton(currency, callback_data=currency_id)]
                        for currency_id, currency in self.config.CURRENCIES.items()
                    ]
                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
                        reply_markup=reply_markup
                    )
                    return CHOOSING_CURRENCY

            source_id = query.data
            context.user_data['source'] = source_id

            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            keyboard = [
                [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {self.config.SOURCES[source_id]}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (—á–µ–∫ –∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é):\n"
                "(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç)",
                reply_markup=reply_markup
            )
            return ATTACHING_DOCUMENT

        except Exception as e:
            logger.error(f"Error in source_selected: {e}")
            if 'query' in locals():
                await self._handle_error(query, "source selection")
            return ConversationHandler.END

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle document attachment."""
        try:
            if update.callback_query:
                query = update.callback_query
                await query.answer()

                if query.data == "skip":
                    # Create keyboard for note selection
                    keyboard = [
                        [InlineKeyboardButton(note, callback_data=f"note_{i}")]
                        for i, note in enumerate(self.config.NOTES)
                    ]
                    keyboard.append([InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_note")])
                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                        reply_markup=reply_markup
                    )
                    return ENTERING_NOTE

                await query.edit_message_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="skip")]])
                )
                return ATTACHING_DOCUMENT

            # Handle actual document/photo
            if update.message.document:
                file = update.message.document
                file_name = file.file_name
            elif update.message.photo:
                file = update.message.photo[-1]  # Get the largest photo
                file_name = f"photo_{file.file_id}.jpg"
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="skip")]])
                )
                return ATTACHING_DOCUMENT

            # Save file info in context
            context.user_data['document'] = {
                'file_id': file.file_id,
                'file_name': file_name
            }

            # Create keyboard for note selection
            keyboard = [
                [InlineKeyboardButton(note, callback_data=f"note_{i}")]
                for i, note in enumerate(self.config.NOTES)
            ]
            keyboard.append([InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_note")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=reply_markup
            )
            return ENTERING_NOTE

        except Exception as e:
            logger.error(f"Error in handle_document: {e}")
            if update.callback_query:
                query = update.callback_query
                await self._handle_error(query, "document attachment")
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return ATTACHING_DOCUMENT

    async def handle_partner_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle partner account selection."""
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "back_to_menu":
                if update.effective_user.id in self.config.ADMIN_IDS:
                    return await self.back_to_admin_menu(query, context)
                else:
                    # Return to source selection
                    keyboard = [
                        [InlineKeyboardButton(source, callback_data=source_id)]
                        for source_id, source in self.config.SOURCES.items()
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–µ–¥—Å—Ç–≤:",
                        reply_markup=reply_markup
                    )
                    return CHOOSING_SOURCE

            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="skip")]])
            )
            return ENTERING_PARTNER_ACCOUNT

        except Exception as e:
            logger.error(f"Error in handle_partner_account: {e}")
            if 'query' in locals():
                await self._handle_error(query, "partner account selection")
            return ATTACHING_DOCUMENT

    async def handle_partner_account_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle partner account input."""
        try:
            partner_account = update.message.text.strip()
            
            try:
                partner_account = validate_partner_account(partner_account)
                context.user_data['partner_account'] = partner_account

                # Create keyboard for note selection
                keyboard = [
                    [InlineKeyboardButton(note, callback_data=f"note_{i}")]
                    for i, note in enumerate(self.config.NOTES)
                ]
                keyboard.append([InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_note")])
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"–°—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_account}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                    reply_markup=reply_markup
                )
                return ENTERING_NOTE

            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return ENTERING_PARTNER_ACCOUNT

        except Exception as e:
            logger.error(f"Error in handle_partner_account_input: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—á–µ—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ENTERING_PARTNER_ACCOUNT

    async def handle_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle note selection."""
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "back_to_menu":
                if update.effective_user.id in self.config.ADMIN_IDS:
                    return await self.back_to_admin_menu(query, context)
                else:
                    # Return to document attachment
                    keyboard = [
                        [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="attach")],
                        [InlineKeyboardButton("üí≥ –£–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data="partner")],
                        [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup
                    )
                    return ATTACHING_DOCUMENT

            if query.data == "custom_note":
                await query.edit_message_text(
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]])
                )
                return ENTERING_NOTE

            note_index = int(query.data.split('_')[1])
            note = self.config.NOTES[note_index]
            context.user_data['note'] = note

            # Create keyboard for period selection
            keyboard = [
                [InlineKeyboardButton("–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", callback_data="single")],
                [InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="monthly")],
                [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="weekly")],
                [InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_period")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
                reply_markup=reply_markup
            )
            return CHOOSING_PERIOD

        except Exception as e:
            logger.error(f"Error in handle_note: {e}")
            if 'query' in locals():
                await self._handle_error(query, "note selection")
            return ENTERING_NOTE

    async def handle_custom_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle custom note input."""
        try:
            note_text = update.message.text.strip()
            
            try:
                note = validate_note(note_text)
                context.user_data['note'] = note

                # Create keyboard for period selection
                keyboard = [
                    [InlineKeyboardButton("–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ", callback_data="period_once")],
                    [InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="period_monthly")],
                    [InlineKeyboardButton("–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ", callback_data="period_quarterly")],
                    [InlineKeyboardButton("–ï–∂–µ–≥–æ–¥–Ω–æ", callback_data="period_yearly")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
                    reply_markup=reply_markup
                )
                return CHOOSING_PERIOD

            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return ENTERING_NOTE

        except Exception as e:
            logger.error(f"Error in handle_custom_note: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ENTERING_NOTE

    async def handle_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle period selection."""
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "back_to_menu":
                if update.effective_user.id in self.config.ADMIN_IDS:
                    return await self.back_to_admin_menu(query, context)
                else:
                    # Return to note selection
                    keyboard = [
                        [InlineKeyboardButton(note, callback_data=f"note_{i}")]
                        for i, note in enumerate(self.config.NOTES)
                    ]
                    keyboard.append([InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_note")])
                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                        reply_markup=reply_markup
                    )
                    return ENTERING_NOTE

            if query.data == "custom_period":
                await query.edit_message_text(
                    "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]])
                )
                return CHOOSING_PERIOD

            period_map = {
                "single": "–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ",
                "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ",
                "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            }

            period = period_map.get(query.data, query.data)
            context.user_data['period'] = period

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
            current_date = datetime.now().strftime('%d.%m.%Y')
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–µ–≥–æ–¥–Ω—è"
            keyboard = [
                [InlineKeyboardButton(f"üìÖ –°–µ–≥–æ–¥–Ω—è ({current_date})", callback_data=f"date_{current_date}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_period")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period}\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì:\n"
                "(–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ)",
                reply_markup=reply_markup
            )
            return CHOOSING_DATE

        except Exception as e:
            logger.error(f"Error in handle_period: {e}")
            if 'query' in locals():
                await self._handle_error(query, "period selection")
            return CHOOSING_PERIOD

    async def handle_period_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle period input."""
        try:
            period_text = update.message.text.strip()
            
            try:
                period = validate_period(period_text)
                context.user_data['period'] = period

                # Create keyboard for date selection
                keyboard = [
                    [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{datetime.now().strftime('%d.%m.%Y')}")],
                    [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{(datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')}")],
                    [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="custom_date")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"–ü–µ—Ä–∏–æ–¥: {period}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=reply_markup
                )
                return CHOOSING_DATE

            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return CHOOSING_PERIOD

        except Exception as e:
            logger.error(f"Error in handle_period_input: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CHOOSING_PERIOD

    async def handle_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle date input."""
        try:
            # Check if this is a callback query (button press) or text input
            if update.callback_query:
                query = update.callback_query
                await query.answer()
                
                if query.data.startswith("date_"):
                    # Extract date from callback data (format: date_DD.MM.YYYY)
                    date_text = query.data.replace("date_", "")
                    try:
                        date = validate_date(date_text)
                        context.user_data['date'] = date
                        
                        # Create summary for confirmation
                        project = context.user_data.get('project', '')
                        amount = context.user_data.get('amount', 0)
                        currency = context.user_data.get('currency', '')
                        source = context.user_data.get('source', '')
                        note = context.user_data.get('note', '')
                        period = context.user_data.get('period', '')

                        summary = "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                        summary += f"–ü—Ä–æ–µ–∫—Ç: {self.config.PROJECTS.get(project, project)}\n"
                        summary += f"–°—É–º–º–∞: {amount}{self.config.CURRENCIES.get(currency, currency)}\n"
                        summary += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {self.config.SOURCES.get(source, source)}\n"

                        if 'partner_account' in context.user_data:
                            summary += f"–°—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {context.user_data['partner_account']}\n"

                        doc_path = context.user_data.get('document', {}).get('path')
                        if doc_path:
                            summary += f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_path}\n"

                        summary += f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n"
                        summary += f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period}\n"
                        summary += f"–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥: {date_text}\n"

                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
                            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)

                        await query.edit_message_text(
                            summary,
                            reply_markup=reply_markup
                        )
                        return CONFIRMING_REQUEST
                    except ValueError as e:
                        await query.edit_message_text(
                            f"‚ùå {str(e)}",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                        )
                        return CHOOSING_DATE
                
            else:
                # Handle text input for date
                date_text = update.message.text.strip()
                try:
                    date = validate_date(date_text)
                    context.user_data['date'] = date

                    # Create summary for confirmation
                    project = context.user_data.get('project', '')
                    amount = context.user_data.get('amount', 0)
                    currency = context.user_data.get('currency', '')
                    source = context.user_data.get('source', '')
                    note = context.user_data.get('note', '')
                    period = context.user_data.get('period', '')

                    summary = "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                    summary += f"–ü—Ä–æ–µ–∫—Ç: {self.config.PROJECTS.get(project, project)}\n"
                    summary += f"–°—É–º–º–∞: {amount} {self.config.CURRENCIES.get(currency, currency)}\n"
                    summary += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {self.config.SOURCES.get(source, source)}\n"

                    if 'partner_account' in context.user_data:
                        summary += f"–°—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {context.user_data['partner_account']}\n"

                    doc_path = context.user_data.get('document', {}).get('path')
                    if doc_path:
                        summary += f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_path}\n"

                    summary += f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n"
                    summary += f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period}\n"
                    summary += f"–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥: {date_text}\n"

                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.message.reply_text(
                        summary,
                        reply_markup=reply_markup
                    )
                    return CONFIRMING_REQUEST
                except ValueError as e:
                    await update.message.reply_text(
                        f"‚ùå {str(e)}"
                    )
                    return CHOOSING_DATE

        except Exception as e:
            logger.error(f"Error in handle_date: {e}")
            if update.callback_query:
                query = update.callback_query
                await self._handle_error(query, "date input")
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            return CHOOSING_DATE

    async def confirm_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle request confirmation."""
        try:
            query = update.callback_query
            await query.answer()

            if query.data == "cancel":
                await query.edit_message_text(
                    "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
                return ConversationHandler.END

            # Create request in database first to get request ID
            request_data = {
                'user_id': update.effective_user.id,
                'project': context.user_data.get('project', ''),
                'amount': context.user_data.get('amount', 0),
                'currency': context.user_data.get('currency', ''),
                'source': context.user_data.get('source', ''),
                'note': context.user_data.get('note', ''),
                'partner_account': context.user_data.get('partner_account', None)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ –¥–∞—Ç–µ –≤ –ø–æ–ª–µ note
            note_additions = []
            
            if context.user_data.get('period'):
                period_text = context.user_data.get('period', '')
                note_additions.append(f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_text}")
                
            if context.user_data.get('date'):
                date_text = context.user_data.get('date', '')
                note_additions.append(f"–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥: {date_text}")
                
            if note_additions:
                if request_data['note']:
                    request_data['note'] += "\n" + "\n".join(note_additions)
                else:
                    request_data['note'] = "\n".join(note_additions)

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            request = create_request(self.db_session, **request_data)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            self._log_request_creation(request.id, update.effective_user.id, request_data)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ –ø–∞–ø–∫—É –∑–∞—è–≤–∫–∏
            if 'document' in context.user_data:
                try:
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞—è–≤–∫–∏
                    request_dir = f"documents/{request.id}"
                    os.makedirs(request_dir, exist_ok=True)

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    file_id = context.user_data['document']['file_id']
                    file_name = context.user_data['document']['file_name']
                    file_path = f"{request_dir}/{file_name}"

                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    file_obj = await context.bot.get_file(file_id)
                    await file_obj.download_to_drive(file_path)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    update_request(self.db_session, request.id, document_path=file_path)
                except Exception as e:
                    logger.error(f"Error downloading document: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª

            # Check if user is admin
            if update.effective_user.id in self.config.ADMIN_IDS:
                # Create keyboard for admin menu
                keyboard = [
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                    [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_requests")],
                    [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{request.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                return ADMIN_MENU
            else:
                # Regular user
                await query.edit_message_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{request.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.\n\n"
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
                return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in confirm_request: {e}")
            if 'query' in locals():
                await self._handle_error(query, "request confirmation")
            return CONFIRMING_REQUEST

    def _get_requests_for_user(self, user_id: int, status_filter=None, page=0, page_size=5):
        """Get requests based on user's access rights."""
        try:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = select(Request)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ —Ñ–∏–Ω–∫–æ–Ω—Ç—Ä–æ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞—è–≤–∫–∏
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                query = query.where(Request.user_id == user_id)
            else:
                # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Ñ–∏–Ω–∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                allowed_sources = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                for source in self.config.SOURCES.keys():
                    if self.config.can_access_source(user_id, source):
                        allowed_sources.append(source)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                if allowed_sources:
                    query = query.where(Request.source.in_(allowed_sources))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if status_filter:
                query = query.where(Request.status == status_filter)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            query = query.order_by(Request.created_at.desc())
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            total = self.db_session.execute(select(func.count()).select_from(query.subquery())).scalar()
            query = query.offset(page * page_size).limit(page_size)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            requests = self.db_session.execute(query).scalars().all()
            
            return requests, total
            
        except Exception as e:
            logger.error(f"Error in _get_requests_for_user: {e}")
            return [], 0

    async def _show_filter_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Show filter menu for request viewing."""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –∑–∞—è–≤–∫–∏
                return await self.view_my_requests(update.callback_query, context)
            
            keyboard = self._get_filter_keyboard()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ id –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç–µ):",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ id –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç):",
                    reply_markup=reply_markup
                )
            
            return VIEWING_REQUESTS
            
        except Exception as e:
            logger.error(f"Error in _show_filter_menu: {e}")
            if update.callback_query:
                await self._handle_error(update.callback_query, "showing filter menu")
            return VIEWING_REQUESTS

    async def _handle_filter(self, query, context):
        """Handle filter selection."""
        try:
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫", show_alert=True)
                return await self.view_my_requests(query, context)
            
            filter_type = query.data.split('_')[1]
            context.user_data['request_filter'] = filter_type
            context.user_data['request_page'] = 0

            logger.info(f"Filtering requests by: {filter_type}")

            status_filter = None
            if filter_type != "all":
                status_filter = getattr(RequestStatus, filter_type.upper(), None)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            requests, total = self._get_requests_for_user(user_id, status_filter, 0, 5)
            total_pages = (total + 5 - 1) // 5

            message, keyboard = self._create_request_list_message(requests, context)
            message += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages} | –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}"

            await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
            return VIEWING_REQUESTS
            
        except Exception as e:
            logger.error(f"Error in _handle_filter: {e}")
            if 'query' in locals():
                await self._handle_error(query, "filtering requests")
            return ADMIN_MENU

    async def _handle_page_navigation(self, query, context):
        """Handle page navigation."""
        try:
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫", show_alert=True)
                return await self.view_my_requests(query, context)
            
            page = context.user_data.get('request_page', 0)

            if query.data == "next_page":
                page += 1
            elif query.data == "prev_page" and page > 0:
                page -= 1

            context.user_data['request_page'] = page

            filter_type = context.user_data.get('request_filter')
            status_filter = None
            if filter_type and filter_type != "all":
                status_filter = getattr(RequestStatus, filter_type.upper(), None)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            requests, total = self._get_requests_for_user(user_id, status_filter, page, 5)
            total_pages = (total + 5 - 1) // 5

            message, keyboard = self._create_request_list_message(requests, context)
            message += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages} | –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}"
            await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
            return VIEWING_REQUESTS
            
        except Exception as e:
            logger.error(f"Error in _handle_page_navigation: {e}")
            if 'query' in locals():
                await self._handle_error(query, "page navigation")
            return ADMIN_MENU

    async def _handle_back_to_menu(self, query):
        """Handle back to menu action."""
        try:
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_requests")],
                [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üëã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return ADMIN_MENU
        except Exception as e:
            logger.error(f"Error in _handle_back_to_menu: {e}")
            if 'query' in locals():
                await self._handle_error(query, "back to menu")
            return ADMIN_MENU

    def _format_user_info(self, user):
        """Format user information for display.
        
        Priority order:
        1. First name (if available)
        2. Username (if available)
        3. Telegram ID (if available)
        4. User ID (as last resort)
        """
        if not user:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
        if hasattr(user, 'first_name') and user.first_name:
            return user.first_name
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º username
        if hasattr(user, 'username') and user.username:
            return f"@{user.username}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å telegram_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(user, 'telegram_id'):
            return f"user_{user.telegram_id}"
        
        # –í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑—É–µ–º id
        return f"user_{user.id}"

    def _create_request_list_message(self, requests, context):
        """Create message and keyboard for request list."""
        if not requests:
            message = "üìã –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters")]]
            return message, keyboard

        filter_type = context.user_data.get('request_filter', 'all')
        filter_name = {
            'pending': '‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'waiting': 'üí∞ –û–¥–æ–±—Ä–µ–Ω–æ/–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã',
            'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ',
            'all': 'üìã –í—Å–µ –∑–∞—è–≤–∫–∏'
        }.get(filter_type, 'üìã –ó–∞—è–≤–∫–∏')

        message = f"{filter_name}:\n\n"

        for req in requests:
            emoji = self.status_emoji.get(req.status, "")
            user = self.db_session.query(User).filter_by(telegram_id=req.user_id).first()
            user_info = self._format_user_info(user)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ —Å–∏–º–≤–æ–ª –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
            currency_name = self.config.CURRENCIES.get(req.currency, req.currency)
            currency_symbol = self.config.CURRENCY_SYMBOLS.get(req.currency, self.config.CURRENCY_SYMBOLS['DEFAULT'])
            
            message += f"{emoji} #{req.id} - {self.config.PROJECTS[req.project]} - "
            message += f"{req.amount} {currency_symbol} {currency_name} - {user_info}\n"
            message += f"–°–æ–∑–¥–∞–Ω–æ: {(req.created_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')}  "
            message += f"–ò–∑–º–µ–Ω–µ–Ω–æ: {(req.updated_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')}\n\n"

        keyboard = []
        for req in requests:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ —Å–∏–º–≤–æ–ª –¥–ª—è –∫–Ω–æ–ø–æ–∫
            currency_name = self.config.CURRENCIES.get(req.currency, req.currency)
            currency_symbol = self.config.CURRENCY_SYMBOLS.get(req.currency, self.config.CURRENCY_SYMBOLS['DEFAULT'])
            keyboard.append([InlineKeyboardButton(
                f"{self.status_emoji.get(req.status, '')} #{req.id} - {req.amount} {currency_symbol} {currency_name}",
                callback_data=f"request_{req.id}"
            )])

        page = context.user_data.get('request_page', 0)
        nav_buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥." —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data="prev_page"))

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        filter_type = context.user_data.get('request_filter')
        status_filter = None
        if filter_type and filter_type != "all":
            status_filter = getattr(RequestStatus, filter_type.upper(), None)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        _, total = get_requests_paginated(self.db_session, status=status_filter, page=0, page_size=1)
        total_pages = (total + 5 - 1) // 5  # 5 - —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥." —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data="next_page"))

        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_filters")])

        return message, keyboard

    def _format_request_details(self, request, context):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        user = self.db_session.query(User).filter_by(telegram_id=request.user_id).first()
        emoji = self.status_emoji.get(request.status, "")

        message = f"{emoji} –ó–∞—è–≤–∫–∞ #{request.id}\n\n"
        message += f"–ü—Ä–æ–µ–∫—Ç: {self.config.PROJECTS.get(request.project, request.project)}\n"
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –∫ —Å—É–º–º–µ
        currency_symbol = self.config.CURRENCY_SYMBOLS.get(request.currency, self.config.CURRENCY_SYMBOLS['DEFAULT'])
        message += f"–°—É–º–º–∞: {request.amount} {currency_symbol} {self.config.CURRENCIES.get(request.currency, request.currency)}\n"
        message += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {self.config.SOURCES.get(request.source, request.source)}\n"
        message += f"–û—Ç: {self._format_user_info(user)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–ö–æ–º—É" –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        if request.partner_account:
            message += f"–ö–æ–º—É: {request.partner_account}\n"
            
        message += f"–°—Ç–∞—Ç—É—Å: {self.STATUS_DISPLAY.get(request.status.value, request.status.value)}\n"
        message += f"–î–∞—Ç–∞: {(request.created_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')}\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        period_text = getattr(request, 'period', None) or context.user_data.get('period', None)
        date_period_text = None
        note_text = None
        if request.note:
            lines = request.note.split('\n')
            for line in lines:
                if line.startswith('–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥:'):
                    date_period_text = line
                elif line.startswith('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:'):
                    period_text = line.replace('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:', '').strip()
                elif line.strip():
                    note_text = line
        if period_text:
            message += f"\n–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_text}"
        if date_period_text:
            message += f"\n{date_period_text}"
        if note_text:
            message += f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note_text}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
        if hasattr(request, 'status_history') and request.status_history:
            try:
                history = json.loads(request.status_history)
                message += "\n\n–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:"
                for entry in history:
                    status = entry['status'].upper()
                    timestamp = datetime.fromisoformat(entry['timestamp'])
                    user_id = entry.get('user_id')
                    user = self.db_session.query(User).filter_by(telegram_id=user_id).first() if user_id else None
                    user_info = self._format_user_info(user) if user else "–°–∏—Å—Ç–µ–º–∞"
                    status_display = self.STATUS_DISPLAY.get(status.lower(), status)
                    formatted_date = (timestamp + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')
                    message += f"\n- –ò–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ {status_display} \n {formatted_date} - {user_info}"
            except Exception as e:
                logger.error(f"Error parsing status history: {e}")
                message += f"\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.STATUS_DISPLAY.get(request.status.value.lower(), request.status.value)}"
        else:
            message += f"\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.STATUS_DISPLAY.get(request.status.value.lower(), request.status.value)}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = get_request_comments(self.db_session, request.id)
        if comments:
            message += "\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:"
            for comment in comments:
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_user = self.db_session.query(User).filter_by(telegram_id=comment.telegram_id).first()
                user_info = self._format_user_info(comment_user) if comment_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                formatted_date = (comment.created_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M:%S')
                message += f"\n\nüí¨ {comment.text}\nüë§ {user_info}\nüïí {formatted_date}"

        return message

    def _create_request_actions_keyboard(self, request, request_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏."""
        keyboard = []
        
        # Add action buttons based on request status
        if request.status == RequestStatus.PENDING:
            keyboard.extend([
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")]
            ])
        elif request.status == RequestStatus.WAITING:
            keyboard.append([InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é", callback_data=f"approve_{request_id}")])

        # Add common buttons
        keyboard.extend([
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{request_id}")],
            [InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
        ])
        
        return keyboard

    async def view_request_details_by_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int = None) -> int:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –ø–æ ID."""
        try:
            query = update.callback_query
            await query.answer()

            # –ï—Å–ª–∏ request_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ –∏–∑ callback_data
            if request_id is None and query.data.startswith('view_'):
                request_id = int(query.data.split('_')[1])

            request = get_request(self.db_session, request_id)

            if not request:
                await query.edit_message_text(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            user_id = update.effective_user.id
            is_admin = user_id in self.config.ADMIN_IDS
            is_owner = request.user_id == user_id

            if not (is_admin or is_owner):
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS

            message = self._format_request_details(request, context)
            keyboard = self._create_request_actions_keyboard(request, request_id)
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            if request.document_path and os.path.exists(request.document_path):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                    loading_message = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="‚è≥ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
                    )

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    with open(request.document_path, 'rb') as doc:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                        await context.bot.send_document(
                            chat_id=update.effective_chat.id,
                            document=doc,
                            caption=message,
                            reply_markup=reply_markup
                        )
                        
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                        await loading_message.delete()
                        
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                        await query.message.delete()
                except Exception as e:
                    logger.error(f"Error sending document: {e}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    await loading_message.edit_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    await query.edit_message_text(message, reply_markup=reply_markup)
            else:
                # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                await query.edit_message_text(message, reply_markup=reply_markup)

            return VIEWING_REQUEST_DETAILS

        except Exception as e:
            logger.error(f"Error in view_request_details_by_id: {e}")
            if 'query' in locals():
                await self._handle_error(query, "viewing request details")
            return VIEWING_REQUESTS

    async def handle_request_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞—è–≤–∫–∏ –≤ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫."""
        text = update.message.text.strip()
        if text.isdigit():
            request_id = int(text)
            request = get_request(self.db_session, request_id)
            if request:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                user_id = update.effective_user.id
                is_admin = user_id in self.config.ADMIN_IDS
                is_owner = request.user_id == user_id

                if not (is_admin or is_owner):
                    await update.message.reply_text(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                    )
                    return VIEWING_REQUESTS

                message = self._format_request_details(request, context)
                keyboard = self._create_request_actions_keyboard(request, request_id)
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                if request.document_path and os.path.exists(request.document_path):
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                        loading_message = await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="‚è≥ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
                        )

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                        with open(request.document_path, 'rb') as doc:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                            await context.bot.send_document(
                                chat_id=update.effective_chat.id,
                                document=doc,
                                caption=message,
                                reply_markup=reply_markup
                            )
                            
                            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                            await loading_message.delete()
                    except Exception as e:
                        logger.error(f"Error sending document: {e}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        await loading_message.edit_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                        )
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        await update.message.reply_text(message, reply_markup=reply_markup)
                else:
                    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                    await update.message.reply_text(message, reply_markup=reply_markup)

                return VIEWING_REQUEST_DETAILS
            else:
                await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return VIEWING_REQUESTS
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏ (—á–∏—Å–ª–æ).")
            return VIEWING_REQUESTS

    async def handle_request_navigation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle request list navigation."""
        try:
            query = update.callback_query
            await query.answer()

            logger.info(f"=== Navigation Handler Start ===")
            logger.info(f"Callback data: {query.data}")

            if query.data.startswith("filter_"):
                return await self._handle_filter(query, context)
            elif query.data in ["prev_page", "next_page"]:
                return await self._handle_page_navigation(query, context)
            elif query.data == "back_to_filters":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
                if context.user_data.get('viewing_my_requests'):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
                    return await self.view_my_requests(query, context)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    return await self._show_filter_menu(Update(update_id=0, callback_query=query), context)
            elif query.data == "back_to_menu":
                return await self._show_main_menu(Update(update_id=0, callback_query=query), context)
            elif query.data == "back_to_list":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏
                if context.user_data.get('viewing_my_requests'):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
                    return await self.view_my_requests(query, context)
                elif context.user_data.get('request_filter'):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
                    filter_type = context.user_data['request_filter']
                    page = context.user_data.get('request_page', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
                    status_filter = None
                    if filter_type != "all":
                        status_filter = getattr(RequestStatus, filter_type.upper(), None)
                    
                    requests, total = get_requests_paginated(self.db_session, status=status_filter, page=page, page_size=5)
                    total_pages = (total + 5 - 1) // 5
                    
                    message, keyboard = self._create_request_list_message(requests, context)
                    message += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages} | –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                    if query.message.document:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=message,
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                        await query.message.delete()
                    else:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                        await query.edit_message_text(
                            text=message,
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    
                    return VIEWING_REQUESTS
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    return await self._show_filter_menu(Update(update_id=0, callback_query=query), context)
            elif query.data.startswith("request_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞—è–≤–∫—É
                request_id = int(query.data.split('_')[1])
                return await self.view_request_details_by_id(update, context, request_id)

            return VIEWING_REQUESTS

        except Exception as e:
            logger.error(f"Error in handle_request_navigation: {e}")
            if 'query' in locals():
                await self._handle_error(query, "navigation")
            return VIEWING_REQUESTS

    async def _handle_message_with_document(self, query, text, reply_markup):
        """Helper method to handle messages that might contain documents."""
        if query.message.document:
            # If message contains document, send new message
            await query.message.bot.send_message(
                chat_id=query.message.chat_id,
                text=text,
                reply_markup=reply_markup
            )
            # Delete old message with document
            await query.message.delete()
        else:
            # If no document, just edit the message
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup
            )

    async def handle_request_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle request actions (approve, reject, edit, comment)."""
        try:
            query = update.callback_query
            await query.answer()

            action, request_id = query.data.split('_')
            request_id = int(request_id)
            request = get_request(self.db_session, request_id)

            if not request:
                await query.edit_message_text(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS

            user_id = update.effective_user.id
            
            if action == "approve":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                can_approve = self.config.PERMISSION_APPROVE == 'all' or (self.config.PERMISSION_APPROVE == 'admins' and user_id in self.config.ADMIN_IDS)
                
                if not can_approve:
                    await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
                    return await self.view_request_details_by_id(update, context, request_id)
                
                if request.status == RequestStatus.PENDING:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                    timestamp = (datetime.now() + timedelta(hours=timeDelta)).strftime('%d.%m.%Y %H:%M')
                    update_request_status(self.db_session, request_id, RequestStatus.WAITING, user_id)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    self._log_status_change(request_id, user_id, RequestStatus.PENDING, RequestStatus.WAITING)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                    if query.message.document:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. {timestamp}",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–µ", callback_data=f"view_{request_id}")]])
                        )
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                        await query.message.delete()
                    else:
                        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.edit_message_text(
                            f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. {timestamp}",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–µ", callback_data=f"view_{request_id}")]])
                        )
                elif request.status == RequestStatus.WAITING:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                    timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
                    update_request_status(self.db_session, request_id, RequestStatus.PAID, user_id)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    self._log_status_change(request_id, user_id, RequestStatus.WAITING, RequestStatus.PAID)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                    if query.message.document:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è. {timestamp}",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–µ", callback_data=f"view_{request_id}")]])
                        )
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                        await query.message.delete()
                    else:
                        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.edit_message_text(
                            f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è. {timestamp}",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–µ", callback_data=f"view_{request_id}")]])
                        )

            elif action == "reject":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                can_reject = self.config.PERMISSION_REJECT == 'all' or (self.config.PERMISSION_REJECT == 'admins' and user_id in self.config.ADMIN_IDS)
                
                if not can_reject:
                    await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
                    return await self.view_request_details_by_id(update, context, request_id)
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                context.user_data['rejecting_request_id'] = request_id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                if query.message.document:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:\n(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")]])
                    )
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    await query.message.delete()
                else:
                    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.edit_message_text(
                        "‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:\n(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")]])
                    )
                return ADDING_REJECTION_REASON

            elif action == "edit":
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
                can_edit = self.config.PERMISSION_EDIT == 'all' or (self.config.PERMISSION_EDIT == 'admins' and user_id in self.config.ADMIN_IDS)
                
                if not can_edit:
                    await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
                    return await self.view_request_details_by_id(update, context, request_id)
                
                context.user_data['editing_request_id'] = request_id
                keyboard = [
                    [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data=f"edit_amount_{request_id}")],
                    [InlineKeyboardButton("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data=f"edit_currency_{request_id}")],
                    [InlineKeyboardButton("üè¶ –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data=f"edit_source_{request_id}")],
                    [InlineKeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", callback_data=f"edit_note_{request_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_{request_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                if query.message.document:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                        reply_markup=reply_markup
                    )
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    await query.message.delete()
                else:
                    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                        reply_markup=reply_markup
                    )
                return EDITING_REQUEST

            elif action == "comment":
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                context.user_data['commenting_request_id'] = request_id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                if query.message.document:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")]])
                    )
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    await query.message.delete()
                else:
                    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.edit_message_text(
                        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")]])
                    )
                return ADDING_COMMENT

            return VIEWING_REQUEST_DETAILS

        except Exception as e:
            logger.error(f"Error in handle_request_action: {e}")
            if 'query' in locals():
                await self._handle_error(query, "handling request action")
            return VIEWING_REQUESTS

    async def handle_edit_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle edit choice selection."""
        try:
            query = update.callback_query
            await query.answer()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã
            if query.data.startswith("set_currency_"):
                _, _, currency_id, request_id = query.data.split('_')
                request_id = int(request_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_request(self.db_session, request_id, currency=currency_id)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
                return await self.view_request_details_by_id(update, context, request_id)

            action, field, request_id = query.data.split('_')
            request_id = int(request_id)
            request = get_request(self.db_session, request_id)

            if not request:
                await query.edit_message_text(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS

            if action == "view":
                return await self.view_request_details_by_id(update, context, request_id)

            context.user_data['editing_field'] = field

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—è
            request_text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{request.id}\n"
            request_text += f"–ü—Ä–æ–µ–∫—Ç: {self.config.PROJECTS.get(request.project, 'Undefined')}\n"
            request_text += f"–°—É–º–º–∞: {request.amount}{self.config.CURRENCIES.get(request.currency, 'Undefined')}\n"
            request_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {self.config.SOURCES.get(request.source, 'Undefined')}\n"
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
            note_text = None
            period_text = None
            date_text = None
            
            if request.note:
                lines = request.note.split('\n')
                for line in lines:
                    if line.startswith('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:'):
                        period_text = line.replace('–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:', '').strip()
                    elif line.startswith('–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥:'):
                        date_text = line.replace('–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥:', '').strip()
                    elif line.strip():
                        note_text = line.strip()
            
            if period_text:
                request_text += f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {period_text}\n"
            if date_text:
                request_text += f"–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥: {date_text}\n"
            if note_text:
                request_text += f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note_text}\n"
                
            request_text += f"–°—Ç–∞—Ç—É—Å: {self.status_emoji[request.status]} {request.status.value}\n"
            request_text += f"–°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                
            if field == "amount":
                await query.edit_message_text(
                    f"{request_text}\n"
                    f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {request.amount}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")]])
                )
            elif field == "currency":
                keyboard = []
                for currency_id, currency in self.config.CURRENCIES.items():
                    symbol = self.config.CURRENCY_SYMBOLS.get(currency_id, self.config.CURRENCY_SYMBOLS['DEFAULT'])
                    button_text = f"{symbol} {currency}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_currency_{currency_id}_{request_id}")])
                keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç
                if query.message.document:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"{request_text}\n"
                             f"–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {self.config.CURRENCIES.get(request.currency, 'Undefined')} ({request.currency})\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:",
                        reply_markup=reply_markup
                    )
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    await query.message.delete()
                else:
                    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.edit_message_text(
                        f"{request_text}\n"
                        f"–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {self.config.CURRENCIES.get(request.currency, 'Undefined')} ({request.currency})\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:",
                        reply_markup=reply_markup
                    )
            elif field == "source":
                keyboard = []
                for source_id, source in self.config.SOURCES.items():
                    if 'crypto' in source_id.lower():
                        button_text = f"‚Çø {source}"
                    elif 'bank' in source_id.lower():
                        button_text = f"üè¶ {source}"
                    else:
                        button_text = f"üí∞ {source}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_source_{source_id}_{request_id}")])
                keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    f"{request_text}\n"
                    f"–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: {self.config.SOURCES.get(request.source, 'Undefined')}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:",
                    reply_markup=reply_markup
                )
            elif field == "note":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∏ –¥–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['current_period'] = period_text
                context.user_data['current_date'] = date_text
                
                await query.edit_message_text(
                    f"{request_text}\n"
                    f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note_text or '–ù–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏—è'}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_id}")]])
                )

            return EDITING_REQUEST

        except Exception as e:
            logger.error(f"Error in handle_edit_choice: {e}")
            if 'query' in locals():
                await self._handle_error(query, "edit choice selection")
            request_id = context.user_data.get('editing_request_id')
            if request_id:
                return await self.view_request_details_by_id(update, context, request_id)
            return VIEWING_REQUESTS

    async def handle_edit_source(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        request_id = context.user_data.get('editing_request_id')
        if query.data.startswith("set_"):
            source_id = query.data.replace("set_", "")
            update_request(self.db_session, request_id, source=source_id)
            await query.edit_message_text(f"–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {self.config.SOURCES[source_id]}")
            return await self.view_request_details_by_id(update, context, request_id)
        elif query.data.startswith("view_"):
            return await self.view_request_details_by_id(update, context, request_id)
        else:
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
            return EDITING_SOURCE
    
    async def handle_edit_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle edit input."""
        try:
            request_id = context.user_data.get('editing_request_id')
            field = context.user_data.get('editing_field')
            
            if not request_id or not field:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS
            
            request = get_request(self.db_session, request_id)
            if not request:
                await update.message.reply_text(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS
            
            value = update.message.text.strip()
            
            try:
                # Validate based on field type
                if field == 'amount':
                    validated_value = validate_amount(value)
                    update_request(self.db_session, request_id, amount=validated_value)
                elif field == 'partner_account':
                    validated_value = validate_partner_account(value)
                    update_request(self.db_session, request_id, partner_account=validated_value)
                elif field == 'note':
                    validated_value = validate_note(value)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏ –¥–∞—Ç—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                    note_parts = []
                    if context.user_data.get('current_period'):
                        note_parts.append(f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {context.user_data['current_period']}")
                    if context.user_data.get('current_date'):
                        note_parts.append(f"–î–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥: {context.user_data['current_date']}")
                    if validated_value:
                        note_parts.append(validated_value)
                    final_note = "\n".join(note_parts)
                    update_request(self.db_session, request_id, note=final_note)
                elif field == 'period':
                    validated_value = validate_period(value)
                    update_request(self.db_session, request_id, period=validated_value)
                elif field == 'date':
                    validated_value = validate_date(value)
                    update_request(self.db_session, request_id, date=validated_value)
                else:
                    validated_value = validate_edit_value(value)
                    update_request(self.db_session, request_id, **{field: validated_value})
                
                await update.message.reply_text(
                    "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏", callback_data=f"view_{request_id}")]])
                )
                return VIEWING_REQUEST_DETAILS
                
            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return EDITING_REQUEST
            
        except Exception as e:
            logger.error(f"Error in handle_edit_input: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
            )
            return VIEWING_REQUESTS

    async def handle_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle comment input."""
        try:
            request_id = context.user_data.get('commenting_request_id')
            
            if not request_id:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS
            
            comment_text = update.message.text.strip()
            
            try:
                comment = validate_comment(comment_text)
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ id
                user = self.db_session.query(User).filter_by(telegram_id=update.effective_user.id).first()
                if not user:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                    )
                    return VIEWING_REQUESTS
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ id
                add_comment(
                    self.db_session,
                    request_id,
                    user.id,  # id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
                    comment,
                    telegram_id=update.effective_user.id  # telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
                
                await update.message.reply_text(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request_id} –¥–æ–±–∞–≤–ª–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏", callback_data=f"view_{request_id}")]])
                )
                
                return VIEWING_REQUEST_DETAILS
                
            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return ADDING_COMMENT
            
        except Exception as e:
            logger.error(f"Error in handle_comment: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
            )
            return VIEWING_REQUESTS

    async def handle_rejection_reason(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle rejection reason input."""
        try:
            request_id = context.user_data.get('rejecting_request_id')
            
            if not request_id:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
                )
                return VIEWING_REQUESTS
            
            reason_text = update.message.text.strip()
            
            try:
                reason = validate_rejection_reason(reason_text)
                update_request_status(self.db_session, request_id, RequestStatus.REJECTED, reason)
                
                # Log status change
                self._log_status_change(
                    request_id,
                    update.effective_user.id,
                    RequestStatus.PENDING,
                    RequestStatus.REJECTED,
                    reason
                )
                
                await update.message.reply_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏", callback_data=f"view_{request_id}")]])
                )
                
                return VIEWING_REQUEST_DETAILS
                
            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå {str(e)}"
                )
                return ADDING_REJECTION_REASON
            
        except Exception as e:
            logger.error(f"Error in handle_rejection_reason: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")]])
            )
            return VIEWING_REQUESTS

    def _log_status_change(self, request_id: int, user_id: int, old_status: RequestStatus, new_status: RequestStatus, reason: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏."""
        try:
            timestamp = datetime.now()
            log_entry = {
                'timestamp': timestamp.isoformat(),
                'request_id': request_id,
                'user_id': user_id,
                'action': 'status_change',
                'old_status': old_status.value,
                'new_status': new_status.value,
                'reason': reason
            }
            
            with open('logDB.log', 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
                
        except Exception as e:
            logger.error(f"Error logging status change: {e}")

    def _log_comment(self, request_id: int, user_id: int, comment_text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        try:
            timestamp = datetime.now()
            log_entry = {
                'timestamp': timestamp.isoformat(),
                'request_id': request_id,
                'user_id': user_id,
                'action': 'comment',
                'comment': comment_text
            }
            
            with open('logDB.log', 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
                
        except Exception as e:
            logger.error(f"Error logging comment: {e}")

    def _log_request_creation(self, request_id: int, user_id: int, request_data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        try:
            timestamp = datetime.now()
            log_entry = {
                'timestamp': timestamp.isoformat(),
                'request_id': request_id,
                'user_id': user_id,
                'action': 'create',
                'request_data': request_data
            }
            
            with open('logDB.log', 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
                
        except Exception as e:
            logger.error(f"Error logging request creation: {e}")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle errors."""
        logger.error(f"Update {update} caused error: {context.error}")

        try:
            # Send error message to user
            if update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É @butterglobe"
                )

            # Restart the conversation
            if update.callback_query:
                message = update.callback_query.message
                await message.reply_text("–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            elif update.message:
                await update.message.reply_text("–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    async def _handle_error(self, query, action_type):
        """Handle errors in handlers."""
        try:
            await query.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {action_type}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É @butterglobe\n\n"
                "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/butterglobe")]])
            )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    async def view_my_requests(self, query, context) -> int:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = query.from_user.id
            requests = get_requests(self.db_session, user_id=user_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
            context.user_data['viewing_my_requests'] = True
            
            if not requests:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return ADMIN_MENU

            message = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
            keyboard = []

            for req in requests:
                emoji = self.status_emoji.get(req.status, "")
                user = self.db_session.query(User).filter_by(telegram_id=req.user_id).first()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ —Å–∏–º–≤–æ–ª –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
                currency_name = self.config.CURRENCIES.get(req.currency, req.currency)
                currency_symbol = self.config.CURRENCY_SYMBOLS.get(req.currency, self.config.CURRENCY_SYMBOLS['DEFAULT'])
                
                message += f"{emoji} #{req.id} - {self.config.PROJECTS[req.project]} - "
                message += f"{req.amount} {currency_symbol} {currency_name} - {self._format_user_info(user)}\n"
                message += f"–°–æ–∑–¥–∞–Ω–æ: {(req.created_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')}  "
                message += f"–ò–∑–º–µ–Ω–µ–Ω–æ: {(req.updated_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"{self.status_emoji.get(req.status, '')} #{req.id} - {req.amount} {currency_symbol} {currency_name}",
                    callback_data=f"request_{req.id}"
                )])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup)
            return VIEWING_REQUESTS

        except Exception as e:
            logger.error(f"Error in view_my_requests: {e}")
            if 'query' in locals():
                await self._handle_error(query, "viewing my requests")
            return ADMIN_MENU

    async def handle_export_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle data export functionality."""
        try:
            query = update.callback_query
            await query.answer()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            user_id = update.effective_user.id
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return ADMIN_MENU

            keyboard = [
                [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∑–∞—è–≤–∫–∞–º", callback_data="export_requests")],
                [InlineKeyboardButton("üìà –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="export_users")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return EXPORT_MENU

        except Exception as e:
            logger.error(f"Error in handle_export_data: {e}")
            await self._handle_error(query, "export data")
            return ADMIN_MENU

    async def handle_export_format(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle export format selection."""
        try:
            query = update.callback_query
            await query.answer()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            user_id = update.effective_user.id
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return ADMIN_MENU

            export_type = query.data.split('_')[1]  # requests or users
            context.user_data['export_type'] = export_type

            keyboard = [
                [InlineKeyboardButton("üìÑ Excel", callback_data=f"export_{export_type}_excel")],
                [InlineKeyboardButton("üìÑ CSV", callback_data=f"export_{export_type}_csv")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="export_data")]
            ]

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return EXPORT_FORMAT

        except Exception as e:
            logger.error(f"Error in handle_export_format: {e}")
            await self._handle_error(query, "export format")
            return ADMIN_MENU

    async def process_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Process the actual export."""
        try:
            query = update.callback_query
            await query.answer()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            user_id = update.effective_user.id
            if not (user_id in self.config.ADMIN_IDS or 
                   user_id in self.config.FINCONTROL_IDS or 
                   user_id in self.config.ALL_ACCESS_ADMIN_IDS):
                await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return ADMIN_MENU

            export_type = context.user_data.get('export_type')
            format_type = query.data.split('_')[-1]  # excel or csv

            # Show loading message
            loading_message = await query.edit_message_text(
                "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )

            # Create temporary directory for export files
            temp_dir = tempfile.mkdtemp()
            try:
                if export_type == 'requests':
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
                    requests, _ = self._get_requests_for_user(user_id, page_size=1000)  # –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                    data = []
                    for req in requests:
                        req_dict = {
                            'ID': req.id,
                            '–ü—Ä–æ–µ–∫—Ç': self.config.PROJECTS.get(req.project, req.project),
                            '–°—É–º–º–∞': req.amount,
                            '–í–∞–ª—é—Ç–∞': self.config.CURRENCIES.get(req.currency, req.currency),
                            '–ò—Å—Ç–æ—á–Ω–∏–∫': self.config.SOURCES.get(req.source, req.source),
                            '–°—Ç–∞—Ç—É—Å': self.STATUS_DISPLAY.get(req.status.value, req.status.value),
                            '–°–æ–∑–¥–∞–Ω–æ': (req.created_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M'),
                            '–ò–∑–º–µ–Ω–µ–Ω–æ': (req.updated_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')
                        }
                        if req.note:
                            req_dict['–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'] = req.note
                        if req.partner_account:
                            req_dict['–°—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞'] = req.partner_account
                        data.append(req_dict)
                else:  # users
                    users = self.db_session.query(User).all()
                    data = []
                    for user in users:
                        user_dict = {
                            'ID': user.id,
                            'Telegram ID': user.telegram_id,
                            'Username': user.username,
                            'First Name': user.first_name,
                            'Created At': (user.created_at + timedelta(hours=timeDelta)).strftime('%d/%m/%Y %H:%M')
                        }
                        data.append(user_dict)

                if format_type == 'excel':
                    file_path = os.path.join(temp_dir, f"export_{export_type}.xlsx")
                    df = pd.DataFrame(data)
                    df.to_excel(file_path, index=False)
                else:  # csv
                    file_path = os.path.join(temp_dir, f"export_{export_type}.csv")
                    df = pd.DataFrame(data)
                    df.to_csv(file_path, index=False, encoding='utf-8-sig')

                # Send file
                with open(file_path, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        filename=os.path.basename(file_path)
                    )

                # Update message
                await loading_message.edit_text(
                    "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="export_data")
                    ]])
                )

            finally:
                # Cleanup temporary files
                shutil.rmtree(temp_dir, ignore_errors=True)

            return EXPORT_MENU

        except Exception as e:
            logger.error(f"Error in process_export: {e}")
            await self._handle_error(query, "export process")
            return ADMIN_MENU

    def _format_user_info(self, user):
        """Optimized user info formatting with caching."""
        if not user:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
        cache_key = f"user_info_{user.id}"
        if cache_key in self._user_cache:
            cache_time, info = self._user_cache[cache_key]
            if (datetime.now() - cache_time).total_seconds() < self._cache_timeout:
                return info
        
        if hasattr(user, 'first_name') and user.first_name:
            info = user.first_name
        elif hasattr(user, 'username') and user.username:
            info = f"@{user.username}"
        elif hasattr(user, 'telegram_id'):
            info = f"user_{user.telegram_id}"
        else:
            info = f"user_{user.id}"
            
        self._user_cache[cache_key] = (datetime.now(), info)
        return info

    def _get_filter_keyboard(self) -> list:
        """Generate filter keyboard for request viewing."""
        return [
            [InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="filter_pending")],
            [InlineKeyboardButton("üí∞ –û–¥–æ–±—Ä–µ–Ω–æ/–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", callback_data="filter_waiting")],
            [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="filter_paid")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="filter_rejected")],
            [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="filter_all")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]

class Bot:
    """Main bot class."""
    def __init__(self):
        # Initialize database
        self.db_session = init_db()

        # Initialize config
        self.config = BotConfig()

        # Initialize handlers
        self.handlers = BotHandlers(self.config, self.db_session)

    def run(self):
        """Start the bot."""
        try:
            application = Application.builder().token(self.config.TELEGRAM_TOKEN).build()

            # Add conversation handler
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler('start', self.handlers.start)],
                states={
                    ADMIN_MENU: [
                        CallbackQueryHandler(self.handlers.handle_admin_callback)
                    ],
                    CHOOSING_PROJECT: [
                        CallbackQueryHandler(self.handlers.project_selected)
                    ],
                    ENTERING_AMOUNT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.amount_entered)
                    ],
                    CHOOSING_CURRENCY: [
                        CallbackQueryHandler(self.handlers.currency_selected)
                    ],
                    CHOOSING_SOURCE: [
                        CallbackQueryHandler(self.handlers.source_selected)
                    ],
                    ATTACHING_DOCUMENT: [
                        CallbackQueryHandler(self.handlers.handle_document, pattern="^attach$"),
                        CallbackQueryHandler(self.handlers.handle_partner_account, pattern="^partner$"),
                        CallbackQueryHandler(self.handlers.handle_document, pattern="^skip$"),
                        MessageHandler(filters.Document.ALL | filters.PHOTO, self.handlers.handle_document)
                    ],
                    ENTERING_PARTNER_ACCOUNT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_partner_account_input)
                    ],
                    ENTERING_NOTE: [
                        CallbackQueryHandler(self.handlers.handle_note),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_custom_note)
                    ],
                    CHOOSING_PERIOD: [
                        CallbackQueryHandler(self.handlers.handle_period),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_period_input)
                    ],
                    CHOOSING_DATE: [
                        CallbackQueryHandler(self.handlers.handle_date, pattern="^date_"),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_date)
                    ],
                    CONFIRMING_REQUEST: [
                        CallbackQueryHandler(self.handlers.confirm_request)
                    ],
                    VIEWING_REQUESTS: [
                        CallbackQueryHandler(self.handlers.handle_request_navigation),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_request_id_input)
                    ],
                    VIEWING_REQUEST_DETAILS: [
                        CallbackQueryHandler(self.handlers.handle_request_action, pattern="^(approve|reject|edit|comment)_"),
                        CallbackQueryHandler(self.handlers.handle_request_navigation, pattern="^back_to_list$"),
                        CallbackQueryHandler(self.handlers.view_request_details_by_id, pattern="^view_")
                    ],
                    EDITING_REQUEST: [
                        CallbackQueryHandler(self.handlers.handle_edit_choice, pattern="^(edit_|view_)"),
                        CallbackQueryHandler(self.handlers.handle_edit_choice, pattern="^set_currency_"),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_edit_input)
                    ],
                    EDITING_SOURCE: [
                        CallbackQueryHandler(self.handlers.handle_edit_source)
                    ],
                    ADDING_COMMENT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_comment)
                    ],
                    ADDING_REJECTION_REASON: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_rejection_reason)
                    ],
                    EXPORTING_DATA: [
                        CallbackQueryHandler(self.handlers.handle_export_format)
                    ]
                },
                fallbacks=[CommandHandler('start', self.handlers.start)],
                per_message=False,
                per_chat=True
            )

            application.add_handler(conv_handler)
            application.add_error_handler(self.handlers.error_handler)

            logger.info("Starting bot...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"Error in main: {e}")
            raise

if __name__ == '__main__':
    bot = Bot()
    bot.run()
